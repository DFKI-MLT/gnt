October, 2015:

- integration of clusters from /Users/gune00/data/Marmot/Word

- use preprocessed cluster first:

- use cluster name as feature

- create word2clusterID  map

- unknown words are mapped to clusterID of word <RARE>|<Rare>

-> DONE

- how should I represent word-clusterID ?

-> as binary ala shape feature reusing code of shape

-> since Marmot uses digit normalization, 
	I also use when accessing liblinear cluster id with word w

Integration of new feature into system:

- adapt Alphabet -> DONE
	- only few changes necessary
	- add cluster id map and define activation feature
	- DONE
- adapt class Offsets -> DONE
	- insert cluster id offset slot and add to computation
- adapt class WordFeatures
	- insert cluster feature creation and offset computation
	- DONE
- adapt ModelInfo
	- adapt model file name generator
	- DONE
- adapt problemInstance:
	- have to adjust with new clusterID
	- DONE
	
- adapt GNTrainer
	- load cluster data
	- DONE

This set of classes seems to be all that have to be changed/adapted when a new feature is to be integrated

-> First tests: worked! and shows improvement for NER of about 4,8% F1

Try them with POS tagger as well -> OK, brings improvements

*************
Feb, 2016:

About unknown words:

- All words not member of the clusterId-Map are mapped to dummy word <RARE>.
- Words in the clusterId-Map are NOT lower-cased; only normalization is done by mapping digits to 0
- Currently, no tokenization is performed, because implicitly used via the labeled treebanks
- If I have free text, then tokenization must be done with tokenizer that is also used for creating word clusters
- OR tokenization-inconsistent words will be treated as <RARE>
- SPELLING variation also can not be handled, because we perform exact match with clusterId-Map


HIERIX:

- Cluster from Jon Dehardy - clusterCat
	- run on source text on clusterCat and Marlin
	- use same parameters
		- number of cluster, frequency threshold, iterations
	- difference between clusterCat and Marlin:
		clusterCat uses "leftWord word rightWord bigrams" (similar to word clusters in GNT)
		Marlin uses "leftWord leftWord word" trigrams
	- Jon proposed to use clusters and cluster size as additional feature

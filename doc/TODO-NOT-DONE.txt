HIERIX: January 2016

- Other corpora for DE-POS and DE-NER
	- Mannheim, google books, ...

- check to normalize/scale each component vector
	to unit length (compute length of vector, and then divide each component)
	I think I for got it 
	-> I am doing it now on complete feature vector in 
		trainer.ProblemInstance.createProblemInstanceFromWindow(Window)
	-> try it on relevant component feature!
	
- other shape features
	- cf. doc/LiblinearNER.txt

- use other word embedding -> word2vec -> 
	but actually only used in NER -> so check, whether really usable
	maybe better clustering or other co-occurrence  models (WebQA?)

-	POS tags as feature for NER
	- how can I define a kind of pipeline model for GNT ?

- NER-lexikons
	- could be done by defining a NE-type-based feature similar to cluster-ID
	- but using dictionary lookup 
	- I could use a class OTHR for all words not covered by NE-lists
	
	- distant supervision using NER-lists
		- in principle: automatically tagged corpus PLUS some verification heuristics/context
	
	-> problem for both: ambiguity of NE-type in context
	- REALLY -> I could run NEMEXF or dtree-based tagger to get longest matching trees PLUS threshold
	
- character and other embeddings

- run GNT with suffix AND ngram by concatenating both into one file
	- DONE -> errors when concatenation -> I forgot to sort again after adding indices in 
		features.WordSuffixFeatureFactory.getAllKnownSubstringsForWord(String)
		
- compute all prefixes AND eventually combine with suffixes
	- or use as separate feature
	
- set un-frequent features to 0 -> cf. comments in MDP/doc/GN-TODO.txt

- Interface to TORCH

***
Feature learning:
- Idea: extract POS/NER dictionary of tagged tokens or sequences from training file
	- without any (?) preprocessing of token spelling
	
- Extract and apply dictionary on training file
	- should re-cover training file
	- analyze positive matches, partial matches and negative matches
	- check autoencoder for automatic feature generation

- Use previous predicted tag as feature for POS/NER

- Generalisation:
	- filter out low frequencies of terms/suffixes
	
- Use of gazetteers:
	- instead of using it as feature, use it as pre/postfilter
	- use nemexa for exact match
	- learn to obtain optimal threshold for nemexf via regression analysis on training analysis
	- get NEs also from Wikidata

- Use BIOES schema
	- see code in /nereid/src/main/java/de/dfki/lt/nereid/nep/BIO2BILOUtransformer.java
	
- Test with uniform tag set
	- reuse java code in cf. /MDP/src/de/dfki/lt/nep/ConllNERmapper.java
	
- Cluster from Jon Dehardy

***
Additional applications:
- GNT for morphological tagging
	- combine POS and MORPH tags
	- according to Georg: simple concatenation
	- according to paper in Labeau et al., EMNLP, 2015, there are 619 items
	- current SOTA in Müller&Schütze, ACL, 2015: 
		89,18% (MarLin) and 89,32% (FST-based MA from Charles University, Hajic) 
		
->	DONE; files are defined; DONE: insert into corpus
->  I get 876 different classes -> LIBLINEAR exists with OoutOfMemoryError

- GNT for lemmatization
	
- GNT also for chunking
	- should be very simple, but would eventually need POS tagging

- GNT for semantic role labeling/tagging

- GNT for relation extraction
	- maybe use a specific BIO-like annotation schema
	- check semantic role annotation
	
***
For software package:
- Do splitting

- create property file
- save and move it to model file folder
- add FLORS accuracy to evaluation script
- create input file for TORCH
- generated compressed folder of all data that is necessary for tagging
- define feature instances ala ClearNLP via XML
-> how to integrate feature extraction approach dynamically ?

- define logger
- define parallel processing


	

	
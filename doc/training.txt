2. Training of POS tagger and liblinear
		
Java object structure:

- define trainer class
	has a corpus object
	defines window size l
	loads or creates distributed vectors
	loads or creates pre-computed suffixes
	loads or creates pre-computed shape features

-> 	I can combine all in a class Alphabet initialized with corpus
	- training word2index mapping
	- label set -> incremental
	- distributed word factory -> loaded initially
	- suffix features 	-> incremental
	- shape features	-> incremental
	
	process conll training file and creates 
	training instance: list of pairs (word, pos)
	I need to define a label2num num2label file
	
	for each sentence, performs windows based processing, with prespecified window size
	fills feature vector parts  for each word
	writes out liblinear model file (as gzipped)
	
	what to do with the real feature values of word vector?
	what to do with zero elements ? 
	and splitting?
	
	see http://stats.stackexchange.com/questions/61328/libsvm-data-format
	
Creating training data file:
		
Possible approach:
- load word vectors
- initialize Alphabet
- loop through training sentences incrementally
- create training instance for each word:
	- get label and create label map -> can be done incrementally
	- get words of window
	- for each word create a tokenInstance consisting of three list of indices
		- get left and right distributed word vector in form of index:value
		- compute suffixes, which also incrementally extends suffix factory in form of index:1
		- compute shapes, which also incrementally extends suffix factory  in form of index:1
	- the indices above are only relative 
	- so I need to add an offset:
		- the offset depends on the size of the length of word vectors, suffix vector, and shape vector and the position of the word:
		- if precomputed offset is used, offsets can be computed directly, else offset can only be computed at the end
	- when I have the offsets, I can compute the absolute index-feature map as well which is used by liblinear
	- and later also by the predictor

- size for each word:
	left+right+shape+sufffix
	501+501+49+91144=92195 -> I would need offsets for shape and suffix 
	
- with offset from window size l=2 -> 2l+1=5 words
  
 - 	thus, when I create the feature vector, I need to distinguish suffix at word_1, and word_2, e.g., 
 	for suffix apple, if it occurs at word 0, I have apple0, and at word 1, I have apple1
 	
 -	if apple0 has index 92000, then apple1 has 92000+92159=184195, apple2 then 92000+92159+92159=276390
 
 -	NOTE: feature indices in training file need to be ordered in natural order
 
 - I think using offsets to directly create liblinear feature nodes should be possible, because only for labels I need a bijective
 
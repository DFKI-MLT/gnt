November, 2015:

Language as a parameter:

- I can create it via taggerName:
	- currently available: POS and NER
	- add prefix language id
		- DEPOS, DENER
- and then define language specific tagger train/test classes
-> LOOKS GOOD

- Note: shape features are probably language specific

Where to change:
- define taggerName
- corpus.Corpus -> ok
- corpus.ConllMapper.main(String[]) -> ok
- features.IndicatorWordsCreator -> ok

-> I think this should work for other languages as well

Now, testing NER and POS
-------------------------

NER:
- conll NER data
- using fr.txt from Clef -> NO, seems to have bad encoding
-> works, and 6,4% F1 (67,7%)  better than SVN-NER
-> but still missing > 10% F-measure

- check encoding -> checked -> using iso-8859-1 when creating conll format
	-> transcode fr.txt from iso to utf-8
	-> NO, I am using Marmots wikipedia sentences
- check shape features for German

POS:
- conll German data: resources/data/german
- Corpus: ok
- ConllMapper: ok
- features.IndicatorWordsCreator -> ok

- works! but using tiger1 data

BUT, to make it comparable with Müller et al.,
- extract CONLL POS info from tiger2 corpus directly:
- training: first 40,474 sentences -> tiger-train.conll
- development:  next 5000 sentences -> tiger-devel.conll 40,474 + 5000
- testing: last 5000 sentences -> tiger-test.conll 45,474 + 5000

-> done ! corpus.TigerToConllMapper; encoding looks ok

works good with tiger data -> 0,47 behind SOTA
CHECK encoding also here -> YES, was wrong; it should be iso-8859-1
-> now with correct encoding: 0,39 behind SOTA

NEXT:
encode numbers as in Müller et al., ACL 2015

What could be done to get better results ? 
- investe a bit outcome from devel file
	Damit KOUS PROAV
	enthalten ADJD VVPP
	erhalten VVINF VVPP

- distributed word vectors -> using de-wikidump sentences
- shape features for German
- prefixes and suffixes
- mixed 3-gram, 2-grams, 1-grams
- patterns for some suffixes, e.g., numbers
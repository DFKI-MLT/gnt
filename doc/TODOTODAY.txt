15.9.2015:

- find error with missing signature
	- solved -> 
	  features.WordFeatures.fillShapeFeatures(String, int, Alphabet, boolean) does return an empty shape list (instead of NULL)

- use model file and label map file as parameter
	- solved -> define a class ModelInfo() and use it in trainer and tagger

- define evaluation method
	- done as part of tagger
	- I am using the original conll token and the predicted labels
	- and construct a version which consistent with conlleval

- check which tool for evaluation
	the one here: /Users/gune00/data/conll/conll03-NER/bin
	can also be used for NER
	
16.9.2015:

- define a single place for major resources -> DONE

- define main function to be used by exectuable -> DONE

- train larger models -> DONE

17.9.2015

- allow training without selected features -> DONE

- allow run shells with parameters and defaults -> DONE

22.9.2015:

- first tests with NER -> DONE
	- results are not optimal, even worst than with SvmNER and MdpNER, but probably because shape and suffix features etc.
	- results with conlleval look a bit strange -> use therefore average FB1 over types
	- so need to create own version for NER

23.9.2015:
- also count unknown and known word accuracies -> DONE

- check whole code again:
	- handle GNTrainer bugs -> DONE
	- "<BOUNDARY>" in window 
		-> dummy strings that are needed if index of current token is near beginning/end of sentence
		-> note that this means that context cannot cross sentence border -> OK?
		
- I am using now "<BOUNDARY>" also for "<s>" and "</s>"
	
13.10.2015:

- add to training phase generation of shape features and suffix list -> DONE
- collect all data using taggerName as part of filenames -> DONE

HIERIX:
- got again the error when running Ner with distributed feature:
	Exception in thread "main" java.lang.IllegalArgumentException: feature nodes must be sorted by index in ascending order
	
- generated compressed folder of all data that is necessary for tagging

- unknown word handling: 
	- currently unknown words are considered as isolated words, 
		i.e., words with no context using word2Bigram("<s>", word,"</s>");
	- eventually improve by computing WordDistributedFeatureFactory.word2Bigram(leftWord, word,rightWord);
	- but can only be tested once I have an efficient solution for the distributed word vectors



- define logger
- define parallel processing


	

	